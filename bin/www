#!/usr/bin/env node
var debug = require('debug')('blackAndWhite');
var app = require('../app');

app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});

var io = require('socket.io').listen(server);

io.set('log level',2);
var roomNum = 0;
var roomList = {};
var userList = {}
function trunChanger(roomName){
    for(idx in  roomList[roomName + "userList"]){
        if(roomList[roomName + roomList[roomName + "userList"][idx]].turn){
            roomList[roomName + roomList[roomName + "userList"][idx]].turn = false;
            socket.broadcast.to(roomList[roomName + "userList"][idx]).emit('noTurn',);
        }else{
            roomList[roomName + roomList[roomName + "userList"][idx]].turn = true;
            socket.broadcast.to(roomList[roomName + "userList"][idx]).emit('isTurn',);
        }
    }
}

//소켓 서버 이벤트를 연결합니다.
io.on('connection',function(socket){
    console.log("연결 완료!")

    socket.on("access",function(){
        console.log("access");
        //roomList[socket.id] = socke.id;
        var rooms = io.sockets.adapter.rooms;
        socket.emit("room_update",rooms);
    });

    socket.on("makeRoom",function(){
        console.log("makeRoom Start!")
        roomNum++;
        var roomName = "room_" + roomNum;
            userList[socket.id] = roomName;
            roomList[roomName + "userList"] = [];
            roomList[roomName + "userList"].push(socket.id);
            roomList[roomName + "master"] = socket.id;
            roomList[roomName + socket.id] = {};
            roomList[roomName + socket.id].turn = true;
        socket.join(roomName);
        var rooms = io.sockets.adapter.rooms;
        console.dir("방 목록1 : " + rooms);
        //socket.broadcast.emit("roomListUpdate",rooms);
        socket.emit("makeRoom",{
            "roomNum" : roomNum
        })

        io.sockets.emit("room_update",rooms);
        //var rooms = io.sockets.manager.rooms;
        ///console.log("방 목록1 : " + rooms);
        //socket.emit("makeRoom",rooms);
    })

    socket.on("gameStart",function(room_name){
        console.log("게임시작!")

        for(var idx in roomList[room_name + "userList"]){
            if(roomList[room_name + "userList"][idx] !== roomList[room_name + "master"]){
                socket.broadcast.to(roomList[room_name + "userList"][idx]).emit("noTurn",[]);
            }
        }
        socket.broadcast.to(roomList[room_name + "master"]).emit('isTurn',roomList[room_name + "master"]);
    });

    socket.on("betting",function(data){
        console.log("배팅 스코어 : " + data.bettingScore);
        var roomName = userList[socket.id];
        roomList[roomName + socket.id].battingScore = data.bettingScore;
        trunChanger(roomName);

    })

    socket.on("join_room",function(room_name){
        console.log("join room");

        roomList[room_name + "userList"].push(socket.id);
        roomList[room_name + "noMaster"].push(socket.id);
        roomList[room_name + socket.id] = {};
        roomList[room_name + socket.id].turn = false;
        userList[socket.id] = room_name;
        console.log(room_name + "의 유저 리스트 : " + roomList[room_name + "userList"]);
        console.log(room_name + "의 방장: " +roomList[room_name + "master"])
        socket.join(room_name);
        var rooms = io.sockets.adapter.rooms;
        //socket.broadcast.to(room_name).emit('join_room', rooms.room_name)
        io.sockets.in(room_name).emit('join_room',room_name);
    })
});

//socket 서버에서 나감
io.sockets.on('disconnect',function(){
    console.log("Client out");
});